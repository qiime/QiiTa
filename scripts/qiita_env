#!/usr/bin/env python

# -----------------------------------------------------------------------------
# Copyright (c) 2014--, The Qiita Development Team.
#
# Distributed under the terms of the BSD 3-clause License.
#
# The full license is in the file LICENSE, distributed with this software.
# -----------------------------------------------------------------------------

import click

from qiita_db.environment_manager import (make_environment,
                                          drop_environment,
                                          clean_test_environment,
                                          DFLT_BASE_WORK_FOLDER,
                                          ENVIRONMENTS, CLUSTERS)
from qiita_core.environment_manager import (start_cluster as _start_cluster,
                                            stop_cluster as _stop_cluster)
from qiita_core.configuration_manager import ConfigurationManager


_CONFIG = ConfigurationManager()


@click.group()
def env():
    pass


@env.command()
@click.argument('clusters', required=True, type=click.Choice(CLUSTERS),
                nargs=-1)
def start_cluster(clusters):
    """Start a compute environment"""
    for cluster in clusters:
        print "Starting cluster", cluster
        if cluster == 'demo':
            _start_cluster(_CONFIG.ipyc_demo, _CONFIG.ipyc_demo_n)
        elif cluster == 'reserved':
            _start_cluster(_CONFIG.ipyc_reserved, _CONFIG.ipyc_reserved_n)
        elif cluster == 'general':
            _start_cluster(_CONFIG.ipyc_general, _CONFIG.ipyc_general_n)


@env.command()
@click.argument('clusters', required=True, type=click.Choice(CLUSTERS),
                nargs=-1)
def stop_cluster(clusters):
    """Stop a compute environment"""
    for cluster in clusters:
        print "Stopping cluster", cluster
        if cluster == 'demo':
            _stop_cluster(_CONFIG.ipyc_demo)
        elif cluster == 'reserved':
            _stop_cluster(_CONFIG.ipyc_reserved)
        elif cluster == 'general':
            _stop_cluster(_CONFIG.ipyc_general)


@env.command()
@click.argument('envs', nargs=-1, required=True,
                type=click.Choice(ENVIRONMENTS))
@click.option('--base_data_folder', default=_CONFIG.base_data_dir,
              help="The folder where the test data files are stored")
@click.option('--base_work_folder', default=DFLT_BASE_WORK_FOLDER,
              help="The folder where the actively worked on files are stored")
@click.option('--user', default=_CONFIG.user,
              help="The database user to connect to the database")
@click.option('--password', default=_CONFIG.password,
              help="The database password to connect to the database")
@click.option('--host', default=_CONFIG.host,
              help='The host where the database lives')
@click.option('--database', default=_CONFIG.database,
              help="The postgres database to connect to")
@click.option('--load-ontologies/--no-load-ontologies',
              default=False, help='if True, ontologies will be loaded')
def make(envs, base_data_folder, base_work_folder, user, password, host,
         database, load_ontologies):
    """Creates the passed environment"""
    for env in envs:
        print "Making environment", env
        make_environment(env, base_data_folder, base_work_folder, user, password,
                         host, database, load_ontologies)


@env.command()
@click.argument('envs', nargs=-1, required=True,
                type=click.Choice(ENVIRONMENTS))
@click.option('--user', default=_CONFIG.user,
              help="The database user to connect to the database")
@click.option('--password', default=_CONFIG.password,
              help="The database password to connect to the database")
@click.option('--host', default=_CONFIG.host,
              help='The host where the database lives')
@click.option('--database', default=_CONFIG.database,
              help="The postgres database to connect to")
def drop(envs, user, password, host, database):
    """Drops the passed database environment"""
    for env in envs:
        drop_environment(env, user, password, host, database)


@env.command()
@click.option('--user', default=_CONFIG.user,
              help="The database user to connect to the database")
@click.option('--password', default=_CONFIG.password,
              help="The database password to connect to the database")
@click.option('--host', default=_CONFIG.host,
              help='The host where the database lives')
def clean_test(user, password, host):
    """Cleans the test database environment.

    In case that the test database is dirty (i.e. the 'qiita' schema is
    present), this cleans it up by dropping the 'qiita' schema.
    """
    clean_test_environment(user, password, host)


if __name__ == '__main__':
    env()
