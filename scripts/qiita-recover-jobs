#!/usr/bin/env python

# -----------------------------------------------------------------------------
# Copyright (c) 2014--, The Qiita Development Team.
#
# Distributed under the terms of the BSD 3-clause License.
#
# The full license is in the file LICENSE, distributed with this software.
# -----------------------------------------------------------------------------
from subprocess import check_output
from qiita_db.sql_connection import TRN
from qiita_db.processing_job import ProcessingJob
from time import sleep


SLEEP_TIME = 2


def _submit_jobs(jids_to_recover, recover_type):
    len_jids_to_recover = len(jids_to_recover) - 1
    for i, j in enumerate(jids_to_recover):
        print 'recovering %s: %d/%d' % (recover_type, len_jids_to_recover, i)
        job = ProcessingJob(j)
        job._set_status('in_construction')
        job.submit()
        sleep(SLEEP_TIME)


def _retrieve_queue_jobs():
    qiita_jobs = [line.split()[0] for line in check_output("qstat").split("\n")
                  # just retriving 'qiita' and ignoring [] (ipython workers)
                  if 'qiita' in line and '[]' not in line and
                  # and private jobs
                  'private' not in line and
                  'STDIN' not in line]
    qiita_jids = []
    for qj in qiita_jobs:
        # to retrieve info about the jobs we need to use the fullname, so
        # appending .ucsd.edu
        args = ["qstat", "-f", "%s.ucsd.edu" % qj]
        # the name is the last string of the line and has .txt prepended
        qji = [line.split()[-1].split(".")[0]
               for line in check_output(args).split("\n")
               if 'Job_Name' in line]
        qiita_jids.extend(qji)

    return set(qiita_jids)


def qiita_recover_jobs():
    sql = """SELECT processing_job_id
             FROM qiita.processing_job
             JOIN qiita.processing_job_status
             USING (processing_job_status_id)
             WHERE processing_job_status = %s"""

    # Step 1: recover jobs that are in queue status
    with TRN:
        recover_type = 'queued'
        TRN.add(sql, [recover_type])
        jids = set(TRN.execute_fetchflatten())
        jids_to_recover = jids - _retrieve_queue_jobs()

        _submit_jobs(jids_to_recover, recover_type)

    # Step 2: recover jobs that are running, note that there are several steps
    #         to recover this group: 2.1. check if they have validators,
    #         2.2. if so, recover validators, 2. recover failed jobs
    with TRN:
        recover_type = 'running'
        TRN.add(sql, [recover_type])
        jids = set(TRN.execute_fetchflatten())
        qiita_jids = _retrieve_queue_jobs()
        jids_to_recover = jids - qiita_jids

        # first start validators that are not running
        validate = [j for j in jids_to_recover
                    if ProcessingJob(j).command.name == 'Validate']
        _submit_jobs(validate, recover_type + '/validate')

        # then the release validator
        release_validators = [
            j for j in jids_to_recover
            if ProcessingJob(j).command.name == 'release_validators']
        _submit_jobs(release_validators, recover_type + '/release_validators')

        jids_to_recover = (jids_to_recover - set(validate) -
                           set(release_validators))

        # 3.1, and 3.2: checking which jobs have validators, and recover them
        jobs_with_validators = []
        for j in jids_to_recover:
            job = ProcessingJob(j)
            validators = job.validator_jobs
            if not validators:
                jobs_with_validators.append(j)
                continue
            else:
                # adding validators to jobs_with_validators to ignore them
                # in the next code of block
                for vj in validators:
                    jobs_with_validators.append(vj.id)
            status = set([v.status for v in validators
                          if v.id not in qiita_jids])
            # if there are no status, that means that the validators weren't
            # created and we should rerun from scratch (Step 4)
            if not bool(status):
                continue
            # it multiple status in the validators, it's a complex behaivor
            # and needs a case by case solution
            if len(status) != 1:
                print ("Job '%s' has too many validators status (%d), check "
                       "them by hand" % (j, len(status)))
                continue
            status = list(status)[0]

            if status == 'waiting':
                print "releasing job validators: %s" % j
                try:
                    job.release_validators()
                except Exception:
                    print "ERROR, releasing %s validators" % j
                sleep(SLEEP_TIME)
            elif status == 'running':
                _submit_jobs(validators, recover_type + ' validator, running')
            elif status == 'error':
                # in this case is the same process than before but we need
                # to split the set in_construction and submit in 2 steps,
                # however, we can still submit via _submit_jobs
                for v in validators:
                    vjob = ProcessingJob(v)
                    vjob._set_status('in_construction')
                _submit_jobs(validators, recover_type + ' validator, error')
            else:
                print ("Check the status of this job %s : %s and validators"
                       "%s." % (j, status, validators))

        jids_to_recover = jids_to_recover - set(jobs_with_validators)

    # Step 3: Finally, we recover all the leftover jobs
    for i, j in enumerate(jids_to_recover):
        job = ProcessingJob(j)
        status = job.status

        if status == 'waiting':
            print "releasing job validators: %s" % j
            job.release_validators()
            sleep(SLEEP_TIME)
        elif 'running' == status:
            _submit_jobs([j], 'main_job, running')


if __name__ == '__main__':
    qiita_recover_jobs()
